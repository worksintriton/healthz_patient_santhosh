package com.triton.healthZ.serviceprovider;import android.Manifest;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.content.IntentSender;import android.content.pm.PackageManager;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.location.Address;import android.location.Geocoder;import android.location.Location;import android.location.LocationManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.cardview.widget.CardView;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.PendingResult;import com.google.android.gms.common.api.Status;import com.google.android.gms.common.util.IOUtils;import com.google.android.gms.location.LocationListener;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationServices;import com.google.android.gms.location.LocationSettingsRequest;import com.google.android.gms.location.LocationSettingsResult;import com.google.android.gms.location.LocationSettingsStatusCodes;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.SupportMapFragment;import com.google.gson.Gson;import com.triton.healthZ.R;import com.triton.healthZ.activity.location.SetLocationSPOldActivity;import com.triton.healthZ.adapter.AddMoreServiceAdapter;import com.triton.healthZ.adapter.AddMoreSpecialzationAdapter;import com.triton.healthZ.adapter.EditCertPdfAdapter;import com.triton.healthZ.adapter.EditGovtIdPdfAdapter;import com.triton.healthZ.adapter.EditPhotoIDPdfAdapter;import com.triton.healthZ.adapter.EditServiceImageListAdapter;import com.triton.healthZ.adapter.SPServiceListEditAdapter;import com.triton.healthZ.adapter.SPSpecialzationListEditAdapter;import com.triton.healthZ.api.APIClient;import com.triton.healthZ.api.RestApiInterface;import com.triton.healthZ.appUtils.NumericKeyBoardTransformationMethod;import com.triton.healthZ.interfaces.AddMoreServiceRemoveListener;import com.triton.healthZ.interfaces.AddMoreSpecialzationRemoveListener;import com.triton.healthZ.interfaces.SPServiceCheckedListener;import com.triton.healthZ.interfaces.SPSpecialzationChckedListener;import com.triton.healthZ.requestpojo.DocBusInfoUploadRequest;import com.triton.healthZ.requestpojo.SPDetailsByUserIdRequest;import com.triton.healthZ.requestpojo.ServiceProviderRegisterFormCreateRequest;import com.triton.healthZ.responsepojo.AddSpecTypeListModel;import com.triton.healthZ.responsepojo.FileUploadResponse;import com.triton.healthZ.responsepojo.SPServiceListResponse;import com.triton.healthZ.responsepojo.ServiceProviderRegisterFormCreateResponse;import com.triton.healthZ.service.GPSTracker;import com.triton.healthZ.sessionmanager.SessionManager;import com.triton.healthZ.utils.ConnectionDetector;import com.triton.healthZ.utils.RestUtils;import com.canhub.cropper.CropImage;import com.wang.avi.AVLoadingIndicatorView;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Objects;import butterknife.BindView;import butterknife.ButterKnife;import cn.pedant.SweetAlert.SweetAlertDialog;import es.dmoral.toasty.Toasty;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class ServiceProviderEditFormActivity extends AppCompatActivity implements View.OnClickListener, SPServiceCheckedListener, AddMoreServiceRemoveListener, SPSpecialzationChckedListener, AddMoreSpecialzationRemoveListener,        OnMapReadyCallback, GoogleApiClient.ConnectionCallbacks,        GoogleApiClient.OnConnectionFailedListener, LocationListener {    private final String TAG = "ServiceProviderEditFormActivity";    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edt_business_name)    EditText edt_business_name;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edt_aboutsp)    EditText edt_aboutsp;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rl_service_gallery_image)    RelativeLayout rl_service_gallery_image;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rl_certificates)    RelativeLayout rl_certificates;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rl_govtid)    RelativeLayout rl_govtid;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rl_photoid)    RelativeLayout rl_photoid;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.buttonsubmit)    Button buttonsubmit;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_sp_servicelist)    RecyclerView rcylr_sp_servicelist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_sp_servicestaticlist)    RecyclerView rcylr_sp_servicestaticlist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edt_addmore_service)    EditText edt_addmore_service;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.btn_add_service)    Button btn_add_service;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_sp_specializationlist)    RecyclerView rcylr_sp_specializationlist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_sp_specializationstaticlist)    RecyclerView rcylr_sp_specializationstaticlist;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.edt_specialization_ifany)    EditText edt_specialization_ifany;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.btn_add_specialization)    Button btn_add_specialization;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.txt_no_records_specialization)    TextView txt_no_records_specialization;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_service_img)    RecyclerView rcylr_choosen_service_img;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_certificate_img)    RecyclerView recylerView_choosen_certificate_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_govtid_images)    RecyclerView recylerView_choosen_govtid_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.rcylr_choosen_photoid_img)    RecyclerView recylerView_choosen_photo_id_images;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.cdvw_certificate)    CardView material_cardview_certificate;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.img_bck)    ImageView img_bck;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.avi_indicator)    AVLoadingIndicatorView avi_indicator;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.txt_no_records)    TextView txt_no_records;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.txt_address)    TextView txt_address;    @SuppressLint("NonConstantResourceId")    @BindView(R.id.txt_location_change)    TextView txt_location_change;    String business_name;    ArrayList<FileUploadResponse> certificatePicResponse = new ArrayList<>();    private final List<DocBusInfoUploadRequest.GovtIdPicBean> govtIdPicBeans = new ArrayList<>();    private final List<DocBusInfoUploadRequest.PhotoIdPicBean> photoIdPicBeans = new ArrayList<>();    ArrayList<AddSpecTypeListModel> addSpecTypeListModels = new ArrayList<>();    SPServiceListEditAdapter spServiceListEditAdapter;    SPSpecialzationListEditAdapter spSpecialzationListEditAdapter;    AddMoreServiceAdapter addMoreServiceAdapter;    AddMoreSpecialzationAdapter addMoreSpecialzationAdapter;    EditServiceImageListAdapter editServiceImageListAdapter;    EditCertPdfAdapter editCertPdfAdapter;    EditGovtIdPdfAdapter editGovtIdPdfAdapter;    EditPhotoIDPdfAdapter editPhotoIDPdfAdapter;    MultipartBody.Part filePart,certPart,govIdPart,photIDPart;    private static final int REQUEST_CLINIC_CAMERA_PERMISSION_CODE = 785 ;    private static final int REQUEST_READ_CLINIC_PDF_PERMISSION = 787 ;    private static final int REQUEST_READ_GOVT_ID_PDF_PERMISSION = 788;    private static final int REQUEST_READ_PHOTO_ID_PDF_PERMISSION = 789;    private static final int REQUEST_READ_CLINIC_PIC_PERMISSION = 786;    private static final int REQUEST_CERTIFICATE_CAMERA_PERMISSION_CODE = 790;    private static final int REQUEST_READ_CERTIFICATE_PIC_PERMISSION = 791;    private static final int REQUEST_GOVTID_CAMERA_PERMISSION_CODE = 792;    private static final int REQUEST_READ_GOVTID_PIC_PERMISSION = 793;    private static final int REQUEST_PHOTOID_CAMERA_PERMISSION_CODE = 794;    private static final int REQUEST_READ_PHOTOID_PIC_PERMISSION = 795;    private static final int SELECT_CLINIC_CAMERA = 1000 ;    private static final int SELECT_CLINIC_PICTURE = 1001 ;    private static final int SELECT_CERT_PDF = 1002;    private static final int SELECT_GOVTID_PDF = 1003;    private static final int SELECT_PHOTOID_PDF = 1004;    private static final int SELECT_CERTIFICATE_CAMERA = 1005;    private static final int SELECT_CERTIFICATE_PICTURE = 1006;    private static final int SELECT_GOVTID_CAMERA = 1007;    private static final int SELECT_GOVTID_PICTURE = 1008;    private static final int SELECT_PHOTOID_CAMERA = 1009;    private static final int SELECT_PHOTOID_PICTURE = 1010;    String user_id,currentDateandTime;    private String username;    private String useremail;    private String userphone;    private String govtIdPic;    private String photoIdPic;    Dialog alertDialog;    private GoogleApiClient googleApiClient;    Location mLastLocation;    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;    private SupportMapFragment mapFragment;    private double latitude;    private double longitude;    private static final int REQUEST_CHECK_SETTINGS_GPS = 0x1;    private String AddressLine;    private List<ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceListBean> spServiceListEdit;    private List<ServiceProviderRegisterFormCreateResponse.DataBean.BusSpecListBean> spSpecialzationListEdit;    private List<ServiceProviderRegisterFormCreateResponse.DataBean.BusCertifBean> bus_certif_list_edit;    List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_list = new ArrayList<>();    private List<SPServiceListResponse.DataBean.ServiceListBean> spServiceList;    private List<SPServiceListResponse.DataBean.SpecializationBean> spSpecialzationList;    List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_addmore_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_specialzation_addmore_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_spec_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusCertifBean> bus_certif_list = new ArrayList<>();    List<ServiceProviderRegisterFormCreateRequest.BusServiceGallBean> bus_service_gall_list = new ArrayList<>();    private List<ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceGallBean> bus_service_gall_list_edit;    private String _id;    private List<SPServiceListResponse.DataBean.TimeBean> spTimeList;    private String strTimeslot;    private String latlng;    private String CityName;    private boolean isSetAddress = false;    private Dialog dialog;    /*Crop Functonality */    /*Crop Functonality */    int PERMISSION_CLINIC = 1;    int PERMISSION_CERT = 2;    int PERMISSION_GOVT = 3;    int PERMISSION_PHOTO = 4;    String[] PERMISSIONS = {            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.WRITE_EXTERNAL_STORAGE,            Manifest.permission.CAMERA    };    private boolean isAddClinicPic = false;    private boolean isAddCertfProof = false;    private boolean isAddGovtIdproof = false;    private boolean isAddPhotoIDproof = false;    @SuppressLint("LongLogTag")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_service_provider_edit_form);        ButterKnife.bind(this);        SessionManager session = new SessionManager(getApplicationContext());        HashMap<String, String> user = session.getProfileDetails();        username = user.get(SessionManager.KEY_FIRST_NAME);        user_id = user.get(SessionManager.KEY_ID);        useremail = user.get(SessionManager.KEY_EMAIL_ID);        userphone = user.get(SessionManager.KEY_MOBILE);        Log.w(TAG,"username : "+username+" user_id : "+user_id);        avi_indicator.setVisibility(View.GONE);        rcylr_sp_servicestaticlist.setVisibility(View.GONE);        Bundle extras = getIntent().getExtras();        if (extras != null) {            latlng = String.valueOf(getIntent().getSerializableExtra("latlng"));            Log.w(TAG,"latlng-->"+ latlng);            if(latlng != null && !latlng.equalsIgnoreCase("null")){                String newString = latlng.replace("lat/lng:", "");                Log.w(TAG,"latlng=="+newString);                String latlngs = newString.trim().replaceAll("\\(", "").replaceAll("\\)","").trim();                Log.w(TAG,"latlngs=="+latlngs);                String[] separated = latlngs.split(",");                String lat = separated[0];                String lon = separated[1];                latitude = Double.parseDouble(lat);                longitude = Double.parseDouble(lon);            }            CityName = extras.getString("cityname");            AddressLine = extras.getString("address");            String postalCode = extras.getString("PostalCode");            if(AddressLine != null) {                txt_address.setText(AddressLine);                isSetAddress = true;            }        }        if (mapFragment == null) {            mapFragment = SupportMapFragment.newInstance();            mapFragment.getMapAsync(this);        }        googleApiConnected();        LocationRequest locationRequest = LocationRequest.create();        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);        locationRequest.setInterval(1000); // 10 seconds        locationRequest.setFastestInterval(1000); // 5 seconds        if(user_id != null){            if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {                spDetailsReponseByUserIdCall();            }        }        buttonsubmit.setOnClickListener(this);        rl_service_gallery_image.setOnClickListener(this);        rl_certificates.setOnClickListener(this);        rl_govtid.setOnClickListener(this);        rl_photoid.setOnClickListener(this);        img_bck.setOnClickListener(this);        btn_add_service.setOnClickListener(this);        btn_add_specialization.setOnClickListener(this);        txt_location_change.setOnClickListener(this);        /* ************ Adding service gallery Images ************** */        rcylr_choosen_service_img.setHasFixedSize(true);        rcylr_choosen_service_img.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager2 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        rcylr_choosen_service_img.setLayoutManager(layoutManager2);        /* ************ Adding Certificate ************** */        recylerView_choosen_certificate_images.setHasFixedSize(true);        recylerView_choosen_certificate_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager3 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_certificate_images.setLayoutManager(layoutManager3);        /* ************ Adding GovtID ************** */        recylerView_choosen_govtid_images.setHasFixedSize(true);        recylerView_choosen_govtid_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager4 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_govtid_images.setLayoutManager(layoutManager4);        /* ************ Adding PhotoID ************** */        recylerView_choosen_photo_id_images.setHasFixedSize(true);        recylerView_choosen_photo_id_images.setNestedScrollingEnabled(false);        LinearLayoutManager layoutManager5 = new LinearLayoutManager(getApplicationContext(), LinearLayoutManager.HORIZONTAL, false);        recylerView_choosen_photo_id_images.setLayoutManager(layoutManager5);        /* *************** Get Current Date and Time ************************ */        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.getDefault());         currentDateandTime = sdf.format(new Date());    }    @SuppressLint({"LongLogTag", "LogNotTimber"})    public void SPServiceListResponseCall(){        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        //Creating an object of our api interface        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<SPServiceListResponse> call = apiInterface.SPServiceListResponseCall(RestUtils.getContentType());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<SPServiceListResponse>() {            @SuppressLint({"SetTextI18n", "LogNotTimber"})            @Override            public void onResponse(@NonNull Call<SPServiceListResponse> call, @NonNull Response<SPServiceListResponse> response) {                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(200 == response.body().getCode()){                        Log.w(TAG,"SPServiceListResponse" + new Gson().toJson(response.body()));                        if(response.body().getData() != null) {                            if(response.body().getData().getService_list() != null) {                                spServiceList = response.body().getData().getService_list();                            }                            Log.w(TAG,"SPServiceListResponse" + new Gson().toJson(response.body()));                            if(response.body().getData().getSpecialization() != null) {                                spSpecialzationList = response.body().getData().getSpecialization();                            }                            if(response.body().getData().getTime() != null) {                                spTimeList = response.body().getData().getTime();                            }                            if(spTimeList != null && spTimeList.size()>0) {                                for (int i = 0; i < spTimeList.size(); i++) {                                    strTimeslot = spTimeList.get(0).getTime();                                }                                if(bus_service_list != null) {                                    for (int j = 0; j < bus_service_list.size(); j++) {                                        bus_service_list.get(j).setTime_slots(strTimeslot);                                    }                                }                            }                           Log.w(TAG,"bus_service_list : "+new Gson().toJson(bus_service_list));                            Log.w(TAG,"spSpecialzationListEdit : "+new Gson().toJson(spSpecialzationListEdit));                            if(spSpecialzationListEdit != null && spSpecialzationList != null) {                                for (int i = 0; i < spSpecialzationListEdit.size(); i++) {                                    for (int j = 0; j < spSpecialzationList.size(); j++) {                                        if (spSpecialzationListEdit.get(i).getBus_spec_list().equalsIgnoreCase(spSpecialzationList.get(j).getSpecialization())) {                                            ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();                                            busSpecListBean.setBus_spec_list(spSpecialzationList.get(j).getSpecialization());                                            bus_spec_list.add(busSpecListBean);                                        }                                    }                                }                            }                            Log.w(TAG,"bus_spec_list : "+new Gson().toJson(bus_spec_list));                        }                        if(spServiceListEdit != null && spServiceListEdit.size()>0 && spServiceList != null && spServiceList.size()>0){                            try{                                for(int i=0;i<spServiceListEdit.size();i++){                                    for(int j=0;j<spServiceList.size();j++) {                                        if (spServiceListEdit.get(i).getBus_service_list().equalsIgnoreCase(spServiceList.get(j).getService_list())) {                                            spServiceList.get(j).setChbxChecked(true);                                            spServiceList.get(j).setValueAdded(true);                                            spServiceList.get(j).setTime_slots(spServiceListEdit.get(i).getTime_slots());                                            spServiceList.get(j).setAmount(spServiceListEdit.get(i).getAmount());                                            ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();                                            busServiceListBean.setBus_service_list(spServiceListEdit.get(j).getBus_service_list());                                            busServiceListBean.setTime_slots(spServiceListEdit.get(j).getTime_slots());                                            busServiceListBean.setAmount(spServiceListEdit.get(j).getAmount());                                            bus_service_list.add(busServiceListBean);                                        }                                    }                                }                            }catch (Exception e){                            }                        }                        Log.w(TAG,"spServiceList : "+new Gson().toJson(spServiceList));                        if(spServiceList != null && spServiceList.size()>0){                            rcylr_sp_servicelist.setVisibility(View.VISIBLE);                            txt_no_records.setVisibility(View.GONE);                            setSPServiceList(spServiceList,spServiceListEdit);                        }                        else{                            rcylr_sp_servicelist.setVisibility(View.GONE);                            txt_no_records.setVisibility(View.VISIBLE);                            txt_no_records.setText("No services found");                        }                        Log.w(TAG,"spSpecialzationList : "+new Gson().toJson(spSpecialzationList));                        if(spSpecialzationList != null && spSpecialzationList.size()>0){                            rcylr_sp_specializationlist.setVisibility(View.VISIBLE);                            txt_no_records_specialization.setVisibility(View.GONE);                            setSPSpecialzationList(spSpecialzationList,spSpecialzationListEdit);                        }                        else{                            rcylr_sp_specializationlist.setVisibility(View.GONE);                            txt_no_records_specialization.setVisibility(View.VISIBLE);                            txt_no_records_specialization.setText("No specialzation found");                        }                    }                }            }            @Override            public void onFailure(@NonNull Call<SPServiceListResponse> call, @NonNull  Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"SPServiceListResponse flr"+t.getMessage());            }        });    }    private void setSPServiceList(List<SPServiceListResponse.DataBean.ServiceListBean> spServiceList, List<ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceListBean> spServiceListEdit) {        rcylr_sp_servicelist.setLayoutManager(new GridLayoutManager(this, 1));        rcylr_sp_servicelist.setItemAnimator(new DefaultItemAnimator());        spServiceListEditAdapter = new SPServiceListEditAdapter(getApplicationContext(), spServiceList,spServiceListEdit,this,strTimeslot);        rcylr_sp_servicelist.setAdapter(spServiceListEditAdapter);    }    private void setSPAddMoreServiceList(List<ServiceProviderRegisterFormCreateRequest.BusServiceListBean> bus_service_addmore_list) {        rcylr_sp_servicestaticlist.setLayoutManager(new GridLayoutManager(this, 2));        rcylr_sp_servicestaticlist.setItemAnimator(new DefaultItemAnimator());        addMoreServiceAdapter = new AddMoreServiceAdapter(getApplicationContext(), bus_service_addmore_list,this);        rcylr_sp_servicestaticlist.setAdapter(addMoreServiceAdapter);    }    private void setSPSpecialzationList(List<SPServiceListResponse.DataBean.SpecializationBean> spSpecialzationList, List<ServiceProviderRegisterFormCreateResponse.DataBean.BusSpecListBean> spSpecialzationListEdit) {        rcylr_sp_specializationlist.setLayoutManager(new GridLayoutManager(this, 2));        rcylr_sp_specializationlist.setItemAnimator(new DefaultItemAnimator());        spSpecialzationListEditAdapter = new SPSpecialzationListEditAdapter(getApplicationContext(), spSpecialzationList,spSpecialzationListEdit,this);        rcylr_sp_specializationlist.setAdapter(spSpecialzationListEditAdapter);    }    private void setSPAddMoreSpecialzationList(List<ServiceProviderRegisterFormCreateRequest.BusSpecListBean> bus_specialzation_addmore_list) {        rcylr_sp_specializationstaticlist.setLayoutManager(new GridLayoutManager(this, 2));        rcylr_sp_specializationstaticlist.setItemAnimator(new DefaultItemAnimator());        addMoreSpecialzationAdapter = new AddMoreSpecialzationAdapter(getApplicationContext(), bus_specialzation_addmore_list,this);        rcylr_sp_specializationstaticlist.setAdapter(addMoreSpecialzationAdapter);    }    @SuppressLint("LongLogTag")    @Override    public void onItemSPServiceCheck(int position, String servicevalue,boolean isChbxChecked) {        Log.w(TAG,"onItemSPServiceCheck servicevalue : "+servicevalue+" isChbxChecked : "+isChbxChecked);        showAddAmount(position);    }    @SuppressLint("LongLogTag")    @Override    public void onItemSPServiceUnCheck(int position, String servicevalue,boolean isChbxChecked) {        Log.w(TAG,"onItemSPServiceUnCheck servicevalue : "+servicevalue+" isChbxChecked : "+isChbxChecked);        if(servicevalue != null){            if(bus_service_list != null){                for (int i = 0; i < bus_service_list.size(); i++)                    if (bus_service_list.get(i).getBus_service_list().equalsIgnoreCase(servicevalue)) {                        bus_service_list.remove(i);                        Log.w(TAG, "after removing list if" + new Gson().toJson(bus_service_list));                    }            }            if(spServiceList != null && spServiceList.size()>0){                spServiceList.get(position).setChbxChecked(false);                spServiceList.get(position).setValueAdded(false);                rcylr_sp_servicelist.post(new Runnable()                {                    @Override                    public void run() {                        spServiceListEditAdapter.notifyDataSetChanged();                    }                });            }        }        Log.w(TAG,"onItemSPServiceUnCheck spServiceList : "+new Gson().toJson(spServiceList));    }    public static boolean hasPermissions(Context context, String... permissions) {        if (context != null && permissions != null) {            for (String permission : permissions) {                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {                    return false;                }            }        }        return true;    }    @SuppressLint("LongLogTag")    private void chooseServiceGalleryImage() {        Log.w(TAG,"bus_service_gall_list.size() : "+bus_service_gall_list.size()+" conditions : "+(bus_service_gall_list.size()>=3));        if(bus_service_gall_list!=null&&bus_service_gall_list.size()>=3){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 3", Toast.LENGTH_SHORT).show();        }        else {           /* final CharSequence[] items = {"Take Photo", "Choose from Library", "Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Take Photo"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CLINIC_CAMERA_PERMISSION_CODE);                    }                    else                    {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        startActivityForResult(intent, SELECT_CLINIC_CAMERA);                    }                }                else if (items[item].equals("Choose from Library"))                {                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(ServiceProviderEditFormActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PIC_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("image/*");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();*/            if (!hasPermissions(this, PERMISSIONS)) {                ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_CLINIC);            }            else            {                isAddClinicPic = true;                isAddCertfProof = false;                isAddGovtIdproof = false;                isAddPhotoIDproof = false;                CropImage.activity().start(ServiceProviderEditFormActivity.this);                /*CropImage.activity().start(AddYourPetImageOlduserActivity.this);*/            }        }    }    @SuppressLint("LongLogTag")    private void uploadServiceGalleryImage() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(filePart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"Profpic"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        isAddClinicPic = false;                        ServiceProviderRegisterFormCreateRequest.BusServiceGallBean busServiceGallBean = new ServiceProviderRegisterFormCreateRequest.BusServiceGallBean();                        busServiceGallBean.setBus_service_gall(response.body().getData());                        bus_service_gall_list.add(busServiceGallBean);                        ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceGallBean busServiceGallBean1 = new ServiceProviderRegisterFormCreateResponse.DataBean.BusServiceGallBean();                        busServiceGallBean1.setBus_service_gall(response.body().getData());                        bus_service_gall_list_edit.add(busServiceGallBean1);                        editServiceImageListAdapter = new EditServiceImageListAdapter(getApplicationContext(), bus_service_gall_list_edit,bus_service_gall_list);                        rcylr_choosen_service_img.setAdapter(editServiceImageListAdapter);                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void chooseCertPdf() {        if(certificatePicResponse!=null&&certificatePicResponse.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            final CharSequence[] items = {"Select Image", "Select File","Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Select Image"))                {                    if (!hasPermissions(this, PERMISSIONS)) {                        ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_CERT);                    }                    else {                        isAddCertfProof = true;                        isAddClinicPic = false;                        isAddGovtIdproof = false;                        isAddPhotoIDproof = false;                        CropImage.activity().start(ServiceProviderEditFormActivity.this);                    }                }                else if (items[item].equals("Select File")){                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("application/pdf");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    @SuppressLint("LongLogTag")    private void uploadCertPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(certPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        isAddCertfProof =false;                        ServiceProviderRegisterFormCreateRequest.BusCertifBean busCertifBean = new ServiceProviderRegisterFormCreateRequest.BusCertifBean();                        busCertifBean.setBus_certif(response.body().getData());                        bus_certif_list.add(busCertifBean);                        ServiceProviderRegisterFormCreateResponse.DataBean.BusCertifBean busCertifBean1 = new ServiceProviderRegisterFormCreateResponse.DataBean.BusCertifBean();                        busCertifBean1.setBus_certif(response.body().getData());                        bus_certif_list_edit.add(busCertifBean1);                        editCertPdfAdapter = new EditCertPdfAdapter(getApplicationContext(), bus_certif_list_edit,bus_certif_list);                        recylerView_choosen_certificate_images.setAdapter(editCertPdfAdapter);                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void chooseGovIDPdf() {        if(govtIdPicBeans!=null&&govtIdPicBeans.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            final CharSequence[] items = {"Select Image", "Select File","Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Select Image"))                {                    if (!hasPermissions(this, PERMISSIONS)) {                        ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_GOVT);                    }                    else {                        isAddGovtIdproof = true;                        isAddClinicPic = false;                        isAddCertfProof = false;                        isAddPhotoIDproof = false;                        CropImage.activity().start(ServiceProviderEditFormActivity.this);                    }                }                else if (items[item].equals("Select File")){                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("application/pdf");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    @SuppressLint("LongLogTag")    private void uploadGovtIDPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(govIdPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        isAddGovtIdproof = false;                        govtIdPic = response.body().getData();                        DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean (response.body().getData());                        govtIdPicBeans.add(govtIdPicBean);                        editGovtIdPdfAdapter = new EditGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);                        recylerView_choosen_govtid_images.setAdapter(editGovtIdPdfAdapter);                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    private void choosePhotoIDPdf() {        if(photoIdPicBeans.size()>=1){            Toasty.warning(getApplicationContext(), "Sorry you can't Add more than 1", Toast.LENGTH_SHORT).show();        }        else {            final CharSequence[] items = {"Select Image", "Select File","Cancel"};            //AlertDialog.Builder alert=new AlertDialog.Builder(this);            AlertDialog.Builder builder = new AlertDialog.Builder(ServiceProviderEditFormActivity.this);            builder.setTitle("Choose option");            builder.setItems(items, (dialog, item) -> {                if (items[item].equals("Select Image"))                {                    if (!hasPermissions(this, PERMISSIONS)) {                        ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_PHOTO);                    }                    {                        isAddPhotoIDproof=true;                        isAddClinicPic = false;                        isAddCertfProof = false;                        isAddGovtIdproof = false;                        CropImage.activity().start(ServiceProviderEditFormActivity.this);                    }                }                else if (items[item].equals("Select File")){                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M   && ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                    {                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                    }                    else{                        Intent intent = new Intent();                        intent.setType("application/pdf");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);                    }                }                else if (items[item].equals("Cancel")) {                    dialog.dismiss();                }            });            builder.show();        }    }    @SuppressLint("LongLogTag")    private void uploadPhotoIDPdf() {        avi_indicator.show();        RestApiInterface apiInterface = APIClient.getImageClient().create(RestApiInterface.class);        //RestApiInterface ApiService = RetrofitClient.getApiService();        Call<FileUploadResponse> call = apiInterface.getImageStroeResponse(photIDPart);//        Call<ImageFileUploadResponse> call = apiInterface.getImageStroeResponse(getProfileImagePicMultipart());        Log.w(TAG,"url  :%s"+ call.request().url().toString());        call.enqueue(new Callback<FileUploadResponse>() {            @SuppressLint("LongLogTag")            @Override            public void onResponse(@NonNull Call<FileUploadResponse> call, @NonNull Response<FileUploadResponse> response) {                avi_indicator.smoothToHide();                Log.w(TAG,"PdfFileLink"+ "--->" + new Gson().toJson(response.body()));                if (response.body() != null) {                    if (200 == response.body().getCode()) {                        isAddPhotoIDproof = false;                        photoIdPic = response.body().getData();                        DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(response.body().getData());                        photoIdPicBeans.add(photoIdPicBean);                        editPhotoIDPdfAdapter = new EditPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);                        recylerView_choosen_photo_id_images.setAdapter(editPhotoIDPdfAdapter);                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<FileUploadResponse> call, @NonNull Throwable t) {                // avi_indicator.smoothToHide();                Log.w(TAG,"ServerUrlImagePath"+ "On failure working"+ t.getMessage());                //Toast.makeText(getApplicationContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    @SuppressLint({"LongLogTag", "LogNotTimber"})    private void checkValidation() {            business_name = edt_business_name.getText().toString().trim();        Log.w(TAG,"checkValidation spServiceList "+new Gson().toJson(spServiceList));        Log.w(TAG,"checkValidation bus_service_list "+new Gson().toJson(bus_service_list));        boolean can_proceed = true;                if(business_name.isEmpty()){                    edt_business_name.setError("Please fill the business name");                    edt_business_name.requestFocus();                    can_proceed = false;                }                else if(bus_service_list != null && bus_service_list.size()<1){                    Toasty.warning(getApplicationContext(),"Please Choose minimum 1 Service",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(bus_spec_list != null && bus_spec_list.size()<1){                    Toasty.warning(getApplicationContext(),"Please Choose minimum 1 Specialization",Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(bus_service_gall_list != null &&bus_service_gall_list.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose minimum 1 Service gallery image", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(photoIdPicBeans != null &&photoIdPicBeans.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose PhotoID File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(govtIdPicBeans != null &&govtIdPicBeans.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose GovtID File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }                else if(bus_certif_list != null &&bus_certif_list.size()<1){                    Toasty.warning(getApplicationContext(), "Please Choose Certificate File", Toast.LENGTH_SHORT).show();                    can_proceed = false;                }        if(can_proceed){                    if (new ConnectionDetector(getApplicationContext()).isNetworkAvailable(getApplicationContext())) {                        spUpdateReponseCall();                    }                }    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        try {            if (requestCode == REQUEST_CHECK_SETTINGS_GPS) {                switch (resultCode) {                    case Activity.RESULT_OK:                        getMyLocation();                        break;                    case Activity.RESULT_CANCELED:                        getMyLocation();                        break;                }            }            //	Toast.makeText(getActivity(),"kk",Toast.LENGTH_SHORT).show();            if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {                CropImage.ActivityResult result = CropImage.getActivityResult(data);                if (resultCode == RESULT_OK) {                    Uri resultUri = result.getUriContent();                    if (resultUri != null) {                        Log.w("selectedImageUri", " " + resultUri);                        String filename = getFileName(resultUri);                        Log.w("filename", " " + filename);                        String filePath = getFilePathFromURI(ServiceProviderEditFormActivity.this, resultUri);                        assert filePath != null;                        File file = new File(filePath); // initialize file her                        long length = file.length() / 1024; // Size in KB                        Log.w("filesize", " " + length);                        if (length > 2000) {                            new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                                    .setTitleText("File Size")                                    .setContentText("Please choose file size less than 2 MB ")                                    .setConfirmText("Ok")                                    .show();                        } else {                            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy hh:mm aa", Locale.getDefault());                            String currentDateandTime = sdf.format(new Date());                            if(isAddClinicPic){                                filePart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("image/*"), file));                                uploadServiceGalleryImage();                            }                            else if(isAddCertfProof){                                certPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("image/*"), file));                                uploadCertPdf();                            }                            else if(isAddGovtIdproof){                                govIdPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("image/*"), file));                                uploadGovtIDPdf();                            }                            else if(isAddPhotoIDproof){                                photIDPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("image/*"), file));                                uploadPhotoIDPdf();                            }                        }                    } else {                        Toasty.warning(ServiceProviderEditFormActivity.this, "Image Error!!Please upload Some other image", Toasty.LENGTH_LONG).show();                    }                }            }            else if(requestCode== SELECT_CERT_PDF){                if(data!=null){                    try {                        if (resultCode == Activity.RESULT_OK)                        {                            Log.w("URI", " " + data);                            Uri selectedFileUri = data.getData();                            if(selectedFileUri!=null){                                Log.w("selectedFileUri", " " + selectedFileUri);                                String filename = getFileName(selectedFileUri);                                Log.w("filename", " " + filename);                                String filePath = getFilePathFromURI(ServiceProviderEditFormActivity.this,selectedFileUri);                                assert filePath != null;                                File file = new File(filePath); // initialize file here                                long length = file.length() / 1024; // Size in KB                                Log.w("filesize", " " + length);                                if(length>2000){                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                                            .setTitleText("File Size")                                            .setContentText("Please choose file size less than 2MB ")                                            .setConfirmText("Ok")                                            .show();                                }                                else{                                    certPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("pdf/*"), file));                                    uploadCertPdf();                                }                            }                            else {                                Toasty.warning(ServiceProviderEditFormActivity.this, "File Error!!Please upload Some other File", Toasty.LENGTH_LONG).show();                            }                        }                    } catch (Exception e) {                        Log.w("Exception", " " + e);                    }                }                else {                    Toasty.warning(ServiceProviderEditFormActivity.this, "File Error!!Please upload Some other File", Toasty.LENGTH_LONG).show();                }            }            else if(requestCode== SELECT_GOVTID_PDF){                try {                    if (resultCode == Activity.RESULT_OK)                    {                        if(data!=null){                            Log.w("URI", " " + data);                            Uri selectedFileUri = data.getData();                            if(selectedFileUri!=null){                                Log.w("selectedFileUri", " " + selectedFileUri);                                String filename = getFileName(selectedFileUri);                                Log.w("filename", " " + filename);                                String filePath = getFilePathFromURI(ServiceProviderEditFormActivity.this,selectedFileUri);                                assert filePath != null;                                File file = new File(filePath); // initialize file here                                long length = file.length() / 1024; // Size in KB                                Log.w("filesize", " " + length);                                if(length>2000){                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                                            .setTitleText("File Size")                                            .setContentText("Please choose file size less than 2MB ")                                            .setConfirmText("Ok")                                            .show();                                }                                else{                                    govIdPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("pdf/*"), file));                                    uploadGovtIDPdf();                                }                            }                            else {                                Toasty.warning(ServiceProviderEditFormActivity.this, "File Error!!Please upload Some other File", Toasty.LENGTH_LONG).show();                            }                        }                        else {                            Toasty.warning(ServiceProviderEditFormActivity.this, "File Error!!Please upload Some other File", Toasty.LENGTH_LONG).show();                        }                    }                } catch (Exception e) {                    Log.w("Exception", " " + e);                }            }            else if(requestCode== SELECT_PHOTOID_PDF){                try {                    if (resultCode == Activity.RESULT_OK)                    {                        if(data!=null){                            Log.w("URI", " " + data);                            Uri selectedFileUri = data.getData();                            if(selectedFileUri!=null){                                Log.w("selectedFileUri", " " + selectedFileUri);                                String filename = getFileName(selectedFileUri);                                Log.w("filename", " " + filename);                                String filePath = getFilePathFromURI(ServiceProviderEditFormActivity.this,selectedFileUri);                                assert filePath != null;                                File file = new File(filePath); // initialize file here                                long length = file.length() / 1024; // Size in KB                                Log.w("filesize", " " + length);                                if(length>2000){                                    new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                                            .setTitleText("File Size")                                            .setContentText("Please choose file size less than 2MB ")                                            .setConfirmText("Ok")                                            .show();                                }                                else{                                    photIDPart = MultipartBody.Part.createFormData("sampleFile", user_id + currentDateandTime + filename, RequestBody.create(MediaType.parse("pdf/*"), file));                                    uploadPhotoIDPdf();                                }                            }                            else {                                Toasty.warning(ServiceProviderEditFormActivity.this, "File Error!!Please upload Some other File", Toasty.LENGTH_LONG).show();                            }                        }                        else {                            Toasty.warning(ServiceProviderEditFormActivity.this, "File Error!!Please upload Some other File", Toasty.LENGTH_LONG).show();                        }                    }                } catch (Exception e) {                    Log.w("Exception", " " + e);                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onBackPressed() {        super.onBackPressed();        startActivity(new Intent(ServiceProviderEditFormActivity.this, SPProfileScreenActivity.class));        finish();    }    @SuppressLint("NonConstantResourceId")    @Override    public void onClick(View v) {        switch (v.getId()){            case R.id.buttonsubmit:                checkValidation();                break;            case R.id.img_bck:                onBackPressed();                break;                case R.id.rl_service_gallery_image:                    chooseServiceGalleryImage();                break;            case R.id.rl_certificates:                chooseCertPdf();                break;            case R.id.rl_govtid:                chooseGovIDPdf();                break;            case R.id.rl_photoid:                choosePhotoIDPdf();                break;                case R.id.btn_add_service:                    addMoreService();                break;                case R.id.btn_add_specialization:                    addMoreSpecialzation();                break;            case R.id.txt_location_change:                gotoSetlocation();                break;        }    }    private void gotoSetlocation() {        Intent intent = new Intent(getApplicationContext(), SetLocationSPOldActivity.class);        intent.putExtra("fromactivity",TAG);        startActivity(intent);    }    @SuppressLint("LongLogTag")    private void addMoreService() {        if(edt_addmore_service.getText().toString() != null && !edt_addmore_service.getText().toString().isEmpty()){            ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();            busServiceListBean.setBus_service_list(edt_addmore_service.getText().toString());            busServiceListBean.setTime_slots(strTimeslot);            busServiceListBean.setAmount(1);            bus_service_addmore_list.add(busServiceListBean);            bus_service_list.add(busServiceListBean);            rcylr_sp_servicestaticlist.setVisibility(View.VISIBLE);            setSPAddMoreServiceList(bus_service_addmore_list);            edt_addmore_service.setText("");            Log.w(TAG,"moreServiceArrayList : "+new Gson().toJson(bus_service_list));        }else{            showWarningAddMoreService();        }    }    @SuppressLint("LongLogTag")    private void addMoreSpecialzation() {        if(edt_specialization_ifany.getText().toString() != null && !edt_specialization_ifany.getText().toString().isEmpty()){            ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();            busSpecListBean.setBus_spec_list(edt_specialization_ifany.getText().toString());            bus_specialzation_addmore_list.add(busSpecListBean);            bus_spec_list.add(busSpecListBean);            rcylr_sp_specializationstaticlist.setVisibility(View.VISIBLE);            setSPAddMoreSpecialzationList(bus_specialzation_addmore_list);            edt_specialization_ifany.setText("");            Log.w(TAG,"moreSpecialzationArrayList : "+new Gson().toJson(bus_spec_list));        }else{            showWarningAddMoreSpecialzation();        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {            if (grantResults.length > 0                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                if (ContextCompat.checkSelfPermission(getApplicationContext(),                        Manifest.permission.ACCESS_FINE_LOCATION)                        == PackageManager.PERMISSION_GRANTED) {                }            } else {                Toast.makeText(getApplicationContext(), "permission denied", Toast.LENGTH_LONG).show();            }        }        if (requestCode == PERMISSION_CLINIC) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {              /*  Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CLINIC_PICTURE);*/                isAddClinicPic = true;                isAddCertfProof = false;                isAddGovtIdproof = false;                isAddPhotoIDproof = false;                CropImage.activity().start(ServiceProviderEditFormActivity.this);                /*     choosePhotoIDPdf();*/            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permission Required")                        .setContentText("Please Allow Permissions for choosing Images ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (!hasPermissions(this, PERMISSIONS)) {                                ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_CLINIC);                            }                        })                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                        .show();            }        }        else if (requestCode == PERMISSION_CERT) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                /*Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_CERTIFICATE_PICTURE);*//*                chooseCertPdf();*/                isAddCertfProof = true;                isAddClinicPic = false;                isAddGovtIdproof = false;                isAddPhotoIDproof = false;                CropImage.activity().start(ServiceProviderEditFormActivity.this);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permission Required")                        .setContentText("Please Allow Permissions for uploading Images ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (!hasPermissions(this, PERMISSIONS)) {                                ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_CERT);                            }                        })                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                        .show();            }        }        else if (requestCode == PERMISSION_GOVT) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                /*Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_GOVTID_PICTURE);*/                isAddGovtIdproof = true;                isAddClinicPic = false;                isAddCertfProof = false;                isAddPhotoIDproof = false;                CropImage.activity().start(ServiceProviderEditFormActivity.this);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permission Required")                        .setContentText("Please Allow Permissions for uploading Images")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (!hasPermissions(this, PERMISSIONS)) {                                ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_GOVT);                            }                        })                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                        .show();            }        }        else if (requestCode == PERMISSION_PHOTO) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                /*Intent intent = new Intent();                intent.setType("image/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), SELECT_PHOTOID_PICTURE);*/                isAddPhotoIDproof=true;                isAddClinicPic = false;                isAddCertfProof = false;                isAddGovtIdproof = false;                CropImage.activity().start(ServiceProviderEditFormActivity.this);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permission Required")                        .setContentText("Please Allow Permissions for uploading images")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (!hasPermissions(this, PERMISSIONS)) {                                ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_PHOTO);                            }                        })                        .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                        .show();            }        }        else if (requestCode == REQUEST_READ_CLINIC_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_CERT_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permission Required")                        .setContentText("Please Allow Permissions for choosing Pdf files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_CLINIC_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_CLINIC_PDF_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_GOVT_ID_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_GOVTID_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permission Required")                        .setContentText("Please Allow Permissions for choosing Pdf Files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_GOVT_ID_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_GOVT_ID_PDF_PERMISSION);                        })                        .show();            }        }        else if (requestCode == REQUEST_READ_PHOTO_ID_PDF_PERMISSION) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Intent intent = new Intent();                intent.setType("application/pdf");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select PDF"), SELECT_PHOTOID_PDF);            } else {                new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                        .setTitleText("Permission Required")                        .setContentText("Please Allow Permissions for choosing Pdf files ")                        .setConfirmText("Ok")                        .setConfirmClickListener(sDialog -> {                            sDialog.dismissWithAnimation();                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                            }                        })                        .setCancelButton("Cancel", sDialog -> {                            sDialog.dismissWithAnimation();                            showWarning(REQUEST_READ_PHOTO_ID_PDF_PERMISSION);                        })                        .show();            }        }    }    private void showWarning(int REQUEST_PERMISSION_CODE) {        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                .setTitleText("Sorry!!")                .setContentText("You Can't proceed further unless you allow permission")                .setConfirmText("Ok")                .setConfirmClickListener(sDialog -> {                    sDialog.dismissWithAnimation();                    if (!hasPermissions(this, PERMISSIONS)) {                        ActivityCompat.requestPermissions(this, PERMISSIONS, REQUEST_PERMISSION_CODE);                    }                })                .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                .show();    }    private void showWarningAddMoreService() {        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                .setTitleText("Add More Service!!")                .setContentText("Please enter the service name")                .setConfirmText("Ok")                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)                .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                .show();    }    private void showWarningAddMoreSpecialzation() {        new SweetAlertDialog(this, SweetAlertDialog.WARNING_TYPE)                .setTitleText("Add More Specialzation!!")                .setContentText("Please enter the specialzation name")                .setConfirmText("Ok")                .setConfirmClickListener(SweetAlertDialog::dismissWithAnimation)                .setCancelButton("Cancel", SweetAlertDialog::dismissWithAnimation)                .show();    }    public static String getFilePathFromURI(Context context, Uri contentUri) {        //copy file and send new file path        String fileName = getFileName(contentUri);        if (!TextUtils.isEmpty(fileName)) {            String path = context.getFilesDir() + "/" + "MyFirstApp/";            // Create the parent path            File dir = new File(path);            if (!dir.exists()) {                dir.mkdirs();            }            String fullName = path + "mylog";            File copyFile = new File (fullName);            /* File copyFile = new File(Environment.DIRECTORY_DOWNLOADS + File.separator + fileName);*/            copy(context, contentUri, copyFile);            return copyFile.getAbsolutePath();        }        return null;    }    public static String getFileName(Uri uri) {        if (uri == null) return null;        String fileName = null;        String path = uri.getPath();        int cut = path.lastIndexOf('/');        if (cut != -1) {            fileName = path.substring(cut + 1);        }        return fileName;    }    public static void copy(Context context, Uri srcUri, File dstFile) {        try {            InputStream inputStream = context.getContentResolver().openInputStream(srcUri);            if (inputStream == null) return;            OutputStream outputStream = new FileOutputStream(dstFile);            IOUtils.copyStream(inputStream, outputStream);            inputStream.close();            outputStream.close();        } catch (IOException e) {            e.printStackTrace();        }    }    @SuppressLint({"LongLogTag", "LogNotTimber"})    private void spUpdateReponseCall() {        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<ServiceProviderRegisterFormCreateResponse> call = apiInterface.spUpdateReponseCall(RestUtils.getContentType(), serviceProviderRegisterFormCreateRequest());        Log.w(TAG,"ServiceProviderRegisterFormCreateResponse url  :%s"+" "+ call.request().url().toString());        call.enqueue(new Callback<ServiceProviderRegisterFormCreateResponse>() {            @SuppressLint({"LongLogTag", "LogNotTimber"})            @Override            public void onResponse(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Response<ServiceProviderRegisterFormCreateResponse> response) {                Log.w(TAG,"spUpdateReponseCall"+ "--->" + new Gson().toJson(response.body()));                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(response.body().getCode() == 200){                        if (response.body().getMessage() != null){                            showRegisterSuccessalert(response.body().getMessage());                        }                    }                    else{                        showErrorLoading(response.body().getMessage());                    }                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"spUpdateReponseCall flr"+"--->" + t.getMessage());            }        });    }    @SuppressLint("LongLogTag")    private ServiceProviderRegisterFormCreateRequest serviceProviderRegisterFormCreateRequest() {        /*         * user_id : 5fc61b82b750da703e48da78         * _id : 5fc61b82b750da703e48da78         * bus_user_name : mohammed Imthiyas         * bus_user_email : mohammed@gmail.com         * bussiness_name : Mohammed imthiyas         * bus_user_phone : 9876543210         * bus_service_list : [{"bus_service_list":"Service - 1"},{"bus_service_list":"Service - 2"},{"bus_service_list":"Service - 3"}]         * bus_spec_list : [{"bus_spec_list":"Spec -1"},{"bus_spec_list":"Spec -1"},{"bus_spec_list":"Spec -1"}]         * bus_service_gall : [{"bus_service_gall":"http://mysalveo.com/api/uploads/images.jpeg"},{"bus_service_gall":"http://mysalveo.com/api/uploads/images.jpeg"},{"bus_service_gall":"http://mysalveo.com/api/uploads/images.jpeg"}]         * bus_profile : http://mysalveo.com/api/uploads/images.jpeg         * bus_proof : http://mysalveo.com/api/uploads/images.jpeg         * bus_certif : [{"bus_certif":"http://mysalveo.com/api/uploads/images.jpeg"},{"bus_certif":"http://mysalveo.com/api/uploads/images.jpeg"},{"bus_certif":"http://mysalveo.com/api/uploads/images.jpeg"}]         * date_and_time : 23-10-2020 12:00 AM         * mobile_type : Admin         * profile_status : true         * profile_verification_status : Not verified         *"sp_loc" : "No, chennai tamil nadu",         *"sp_lat" : 12.00909,         *"sp_long" : 80.980098,         */        for(int i=0;i<photoIdPicBeans.size();i++){            if(photoIdPicBeans.get(i).getPhoto_id_pic()!=null&&!photoIdPicBeans.get(i).getPhoto_id_pic().isEmpty()){                photoIdPic = photoIdPicBeans.get(i).getPhoto_id_pic();            }        }        for(int i=0;i<govtIdPicBeans.size();i++){            if(govtIdPicBeans.get(i).getGovt_id_pic()!=null&&!govtIdPicBeans.get(i).getGovt_id_pic().isEmpty()){                govtIdPic = govtIdPicBeans.get(i).getGovt_id_pic();            }        }        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm aa", Locale.getDefault());        String currentDateandTime = sdf.format(new Date());        ServiceProviderRegisterFormCreateRequest serviceProviderRegisterFormCreateRequest = new ServiceProviderRegisterFormCreateRequest();        serviceProviderRegisterFormCreateRequest.setUser_id(user_id);        serviceProviderRegisterFormCreateRequest.set_id(_id);        serviceProviderRegisterFormCreateRequest.setBus_user_name(username);        serviceProviderRegisterFormCreateRequest.setBus_user_email(useremail);        serviceProviderRegisterFormCreateRequest.setBussiness_name(edt_business_name.getText().toString());        serviceProviderRegisterFormCreateRequest.setBus_user_phone(userphone);        serviceProviderRegisterFormCreateRequest.setBus_service_list(bus_service_list);        serviceProviderRegisterFormCreateRequest.setBus_spec_list(bus_spec_list);        serviceProviderRegisterFormCreateRequest.setBus_service_gall(bus_service_gall_list);        serviceProviderRegisterFormCreateRequest.setBus_profile(photoIdPic);        serviceProviderRegisterFormCreateRequest.setBus_proof(govtIdPic);        serviceProviderRegisterFormCreateRequest.setBus_certif(bus_certif_list);        serviceProviderRegisterFormCreateRequest.setDate_and_time(currentDateandTime);        serviceProviderRegisterFormCreateRequest.setMobile_type("Android");        serviceProviderRegisterFormCreateRequest.setProfile_status(true);        serviceProviderRegisterFormCreateRequest.setProfile_verification_status("Not verified");        serviceProviderRegisterFormCreateRequest.setSp_loc(txt_address.getText().toString());        serviceProviderRegisterFormCreateRequest.setSp_lat(latitude);        serviceProviderRegisterFormCreateRequest.setSp_long(longitude);        serviceProviderRegisterFormCreateRequest.setSp_info(edt_aboutsp.getText().toString());        if(latitude!=0&&longitude!=0){            String city = getCity(latitude,longitude);            if(city!=null&&!city.isEmpty()){                serviceProviderRegisterFormCreateRequest.setCity_name(city);            }        }        Log.w(TAG,"spUpdateReponseCall Request"+ "--->" + new Gson().toJson(serviceProviderRegisterFormCreateRequest));        return serviceProviderRegisterFormCreateRequest;    }    private String getCity(double clinic_lat, double clinic_long) {        Geocoder geocoder = new Geocoder(this, Locale.getDefault());        List<Address> addresses = null;        try {            addresses = geocoder.getFromLocation(clinic_lat, clinic_long, 1);        } catch (IOException e) {            e.printStackTrace();        }        String cityName = addresses.get(0).getLocality();        String stateName = addresses.get(0).getSubLocality();        String countryName = addresses.get(0).getAddressLine(2);        return cityName;    }    @SuppressLint("LongLogTag")    @Override    public void addMoreServiceRemoveListener(int position, String servicevalue) {        Log.w(TAG,"addMoreServiceRemoveListener : "+servicevalue);        if(servicevalue != null){            if(bus_service_list != null){                for (int i = 0; i < bus_service_list.size(); i++)                    if (bus_service_list.get(i).getBus_service_list().equalsIgnoreCase(servicevalue)) {                        bus_service_list.remove(i);                        Log.w(TAG, "after removing list if" + new Gson().toJson(bus_service_list));                    }            }        }    }    public void showErrorLoading(String errormesage){        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);        alertDialogBuilder.setMessage(errormesage);        alertDialogBuilder.setPositiveButton("ok",                (arg0, arg1) -> hideLoading());        AlertDialog alertDialog = alertDialogBuilder.create();        alertDialog.show();    }    public void hideLoading(){        try {            alertDialog.dismiss();        }catch (Exception ignored){        }    }    @SuppressLint("LongLogTag")    @Override    public void onItemSPSpecialzationCheck(int position, String specValue) {        SPServiceListResponse.DataBean.SpecializationBean specializationBean = new SPServiceListResponse.DataBean.SpecializationBean();        specializationBean.setSpecialization(specValue);        spSpecialzationList.add(specializationBean);        //spSpecialzationListEditAdapter.notifyDataSetChanged();        ServiceProviderRegisterFormCreateRequest.BusSpecListBean busSpecListBean = new ServiceProviderRegisterFormCreateRequest.BusSpecListBean();        busSpecListBean.setBus_spec_list(specValue);        bus_spec_list.add(busSpecListBean);        Log.w(TAG + "added_specialzation_list",new Gson().toJson(bus_spec_list));    }    @SuppressLint("LongLogTag")    @Override    public void onItemSPSpecialzationUnCheck(int position, String specValue) {        if(specValue != null){            if(bus_spec_list != null){                for (int i = 0; i < bus_spec_list.size(); i++)                    if (bus_spec_list.get(i).getBus_spec_list().equalsIgnoreCase(specValue)) {                        bus_spec_list.remove(i);                        Log.w(TAG, "after removing list if" + new Gson().toJson(bus_spec_list));                    }            }        }    }    @SuppressLint("LongLogTag")    @Override    public void addMoreSpecialzationRemoveListener(int position, String specValue) {        Log.w(TAG,"addMoreSpecialzationRemoveListener : "+specValue);        if(specValue != null){            if(bus_spec_list != null){                for (int i = 0; i < bus_spec_list.size(); i++)                    if (bus_spec_list.get(i).getBus_spec_list().equalsIgnoreCase(specValue)) {                        bus_spec_list.remove(i);                        Log.w(TAG, "after removing list if" + new Gson().toJson(bus_spec_list));                    }            }        }    }    private void googleApiConnected() {        googleApiClient = new GoogleApiClient.Builder(Objects.requireNonNull(getApplicationContext())).                addConnectionCallbacks(this).                addOnConnectionFailedListener(this).                addApi(LocationServices.API).build();        googleApiClient.connect();    }    private void checkLocation() {        try {            LocationManager lm = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);            boolean gps_enabled = false;            boolean network_enabled = false;            try {                gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);            } catch (Exception ignored) {            }            try {                network_enabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);            } catch (Exception ignored) {            }            if (!gps_enabled && !network_enabled) {                if (!lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {                    getMyLocation();                }            } /*else {                getLatandLong();            }*/        } catch (Exception e) {            e.printStackTrace();        }    }    @SuppressLint("LongLogTag")    @Override    public void onLocationChanged(Location location) {        mLastLocation = location;       // latitude = mLastLocation.getLatitude();       // longitude = mLastLocation.getLongitude();       /* if(latitude != 0 && longitude != 0){            getAddress(latitude,longitude);        }        Log.w(TAG,"onLocationChanged : "+" latitude : "+latitude+ " longitude : "+longitude);*/    }    @Override    public void onConnected(@Nullable Bundle bundle) {        permissionChecking();    }    @Override    public void onConnectionSuspended(int i) {    }    @Override    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {    }    @SuppressLint("LongLogTag")    @Override    public void onMapReady(GoogleMap googleMap) {    }    private void permissionChecking() {        if (getApplicationContext() != null) {            if (Build.VERSION.SDK_INT >= 23 && (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) &&                    (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)) {                ActivityCompat.requestPermissions(Objects.requireNonNull(this), new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, 5);            } else {                checkLocation();            }        }    }    public void getMyLocation() {        if (googleApiClient != null) {            if (googleApiClient.isConnected()) {                if(getApplicationContext() != null){                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                        // TODO: Consider calling                        //    ActivityCompat#requestPermissions                        // here to request the missing permissions, and then overriding                        //   public void onRequestPermissionsResult(int requestCode, String[] permissions,                        //                                          int[] grantResults)                        // to handle the case where the user grants the permission. See the documentation                        // for ActivityCompat#requestPermissions for more details.                        return;                    }                }                mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                LocationRequest locationRequest = new LocationRequest();                locationRequest.setInterval(2000);                locationRequest.setFastestInterval(2000);                locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);                LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);                builder.setAlwaysShow(true);                LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, this);                PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());                result.setResultCallback(result1 -> {                    Status status = result1.getStatus();                    switch (status.getStatusCode()) {                        case LocationSettingsStatusCodes.SUCCESS:                            // All location settings are satisfied.                            // You can initialize location requests here.                            mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                            Handler handler = new Handler();                            int delay = 1000; //milliseconds                            handler.postDelayed(new Runnable() {                                @SuppressLint("LongLogTag")                                public void run() {                                    //do something                                    Log.w(TAG, "getMyLocation-->");                                    //parkingListResponseCall(checkinhours,checkouthours,requestCheckinDate,requestCheckoutDate, selectedVehicleTypeId);                                }                            }, delay);                            break;                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:                            try {                                status.startResolutionForResult(this, REQUEST_CHECK_SETTINGS_GPS);                            } catch (IntentSender.SendIntentException e) {                                // Ignore the error.                            }                            break;                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:                            break;                    }                });            }        }    }    @SuppressLint("LongLogTag")    private void getLatandLong() {        try {            if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);            } else {                GPSTracker gps = new GPSTracker(getApplicationContext());                // Check if GPS enabled                if (gps.canGetLocation()) {                    latitude = gps.getLatitude();                    longitude = gps.getLongitude();                    Log.w(TAG, "getLatandLong--->" + "latitude" + " " + latitude + "longitude" + " " + longitude);                    if(latitude != 0 && longitude != 0){                        getAddress(latitude,longitude);                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    @SuppressLint("LongLogTag")    private void getAddress(double latitude, double longitude) {        StringBuilder result = new StringBuilder();        try {            Geocoder geocoder = new Geocoder(this, Locale.getDefault());            List<Address> listAddresses = geocoder.getFromLocation(latitude, longitude, 1);            if (null != listAddresses && listAddresses.size() > 0) {                Address address = listAddresses.get(0);                result.append(address.getLocality()).append("\n");                result.append(address.getCountryName());                String state = listAddresses.get(0).getAdminArea();                String country = listAddresses.get(0).getCountryName();                String subLocality = listAddresses.get(0).getSubLocality();                String postalcode = listAddresses.get(0).getPostalCode();                AddressLine = listAddresses.get(0).getAddressLine(0);                String CityName = listAddresses.get(0).getLocality();                if(CityName != null){                    AddressLine = CityName+" "+listAddresses.get(0).getAddressLine(0);                }                // Thoroughfare seems to be the street name without numbers               String street = address.getThoroughfare();                Log.w(TAG,"AddressLine :"+AddressLine+"  CityName :"+CityName+"  street :"+street);                Log.w(TAG,"state :"+state+" "+"country :"+country+"subLocality :"+subLocality+"  postalcode :"+postalcode);            }        } catch (IOException e) {            Log.e("tag", Objects.requireNonNull(e.getMessage()));        }        result.toString();    }    @SuppressLint({"LongLogTag", "LogNotTimber"})    private void spDetailsReponseByUserIdCall() {        avi_indicator.setVisibility(View.VISIBLE);        avi_indicator.smoothToShow();        RestApiInterface apiInterface = APIClient.getClient().create(RestApiInterface.class);        Call<ServiceProviderRegisterFormCreateResponse> call = apiInterface.spDetailsReponseByUserIdCall(RestUtils.getContentType(), spDetailsByUserIdRequest());        Log.w(TAG,"spDetailsReponseByUserIdCall url  :%s"+" "+ call.request().url().toString());        call.enqueue(new Callback<ServiceProviderRegisterFormCreateResponse>() {            @SuppressLint({"LongLogTag", "LogNotTimber"})            @Override            public void onResponse(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Response<ServiceProviderRegisterFormCreateResponse> response) {                Log.w(TAG,"spDetailsReponseByUserIdCall"+ "--->" + new Gson().toJson(response.body()));                avi_indicator.smoothToHide();                if (response.body() != null) {                    if(response.body().getCode() == 200){                        if(response.body().getData() != null) {                            _id = response.body().getData().get_id();                            spServiceListEdit = response.body().getData().getBus_service_list();                            spSpecialzationListEdit = response.body().getData().getBus_spec_list();                            latitude = response.body().getData().getSp_lat();                            longitude = response.body().getData().getSp_long();                            AddressLine = response.body().getData().getSp_loc();                            if(AddressLine != null){                                txt_address.setText(AddressLine);                            }                            Bundle extras = getIntent().getExtras();                            if (extras != null) {                                latlng = String.valueOf(getIntent().getSerializableExtra("latlng"));                                Log.w(TAG,"latlng-->"+ latlng);                                if(latlng != null && !latlng.equalsIgnoreCase("null")){                                    String newString = latlng.replace("lat/lng:", "");                                    Log.w(TAG,"latlng=="+newString);                                    String latlngs = newString.trim().replaceAll("\\(", "").replaceAll("\\)","").trim();                                    Log.w(TAG,"latlngs=="+latlngs);                                    String[] separated = latlngs.split(",");                                    String lat = separated[0];                                    String lon = separated[1];                                    latitude = Double.parseDouble(lat);                                    longitude = Double.parseDouble(lon);                                }                                CityName = extras.getString("cityname");                                AddressLine = extras.getString("address");                                String postalCode = extras.getString("PostalCode");                                if(AddressLine != null) {                                    txt_address.setText(AddressLine);                                    isSetAddress = true;                                }                            }                            if(response.body().getData().getBussiness_name() != null){                                edt_business_name.setText(response.body().getData().getBussiness_name());                            } if(response.body().getData().getSp_info() != null){                                edt_aboutsp.setText(response.body().getData().getSp_info());                            }                            if(response.body().getData().getBus_service_gall() != null){                                bus_service_gall_list_edit = response.body().getData().getBus_service_gall();                                for(int i=0;i<bus_service_gall_list_edit.size();i++){                                    ServiceProviderRegisterFormCreateRequest.BusServiceGallBean busServiceGallBean = new ServiceProviderRegisterFormCreateRequest.BusServiceGallBean();                                    busServiceGallBean.setBus_service_gall(bus_service_gall_list_edit.get(i).getBus_service_gall());                                    bus_service_gall_list.add(busServiceGallBean);                                }                                if(bus_service_gall_list!=null&&bus_service_gall_list.size()>0){                                    editServiceImageListAdapter = new EditServiceImageListAdapter(getApplicationContext(), bus_service_gall_list_edit,bus_service_gall_list);                                    rcylr_choosen_service_img.setAdapter(editServiceImageListAdapter);                                }                                else {                                    rcylr_choosen_service_img.setVisibility(View.GONE);                                }                            }                            if(response.body().getData().getBus_profile() != null){                                photoIdPic = response.body().getData().getBus_profile();                                DocBusInfoUploadRequest.PhotoIdPicBean photoIdPicBean = new DocBusInfoUploadRequest.PhotoIdPicBean(photoIdPic);                                photoIdPicBeans.add(photoIdPicBean);                                Log.w(TAG,"photoIdPicBeans"+ "--->" + new Gson().toJson(photoIdPicBeans));                                if(photoIdPicBeans!=null&&photoIdPicBeans.size()>0){                                    editPhotoIDPdfAdapter = new EditPhotoIDPdfAdapter(getApplicationContext(), photoIdPicBeans);                                    recylerView_choosen_photo_id_images.setAdapter(editPhotoIDPdfAdapter);                                }                                else {                                    recylerView_choosen_photo_id_images.setVisibility(View.GONE);                                }                            }                            if(response.body().getData().getBus_proof() != null){                                govtIdPic = response.body().getData().getBus_proof();                                DocBusInfoUploadRequest.GovtIdPicBean govtIdPicBean = new DocBusInfoUploadRequest.GovtIdPicBean(govtIdPic);                                govtIdPicBeans.add(govtIdPicBean);                                    editGovtIdPdfAdapter = new EditGovtIdPdfAdapter(getApplicationContext(), govtIdPicBeans);                                    recylerView_choosen_govtid_images.setAdapter(editGovtIdPdfAdapter);                                }                            else {                                recylerView_choosen_govtid_images.setVisibility(View.GONE);                                }                            if(response.body().getData().getBus_certif() != null){                                bus_certif_list_edit = response.body().getData().getBus_certif();                                for(int i=0;i<bus_certif_list_edit.size();i++){                                    ServiceProviderRegisterFormCreateRequest.BusCertifBean busCertifBean = new ServiceProviderRegisterFormCreateRequest.BusCertifBean();                                    busCertifBean.setBus_certif(bus_certif_list_edit.get(i).getBus_certif());                                    bus_certif_list.add(busCertifBean);                                }if(govtIdPicBeans!=null&&govtIdPicBeans.size()>0){                                    editCertPdfAdapter = new EditCertPdfAdapter(getApplicationContext(), bus_certif_list_edit,bus_certif_list);                                    recylerView_choosen_certificate_images.setAdapter(editCertPdfAdapter);                                }                                else {                                    recylerView_choosen_certificate_images.setVisibility(View.GONE);                                }                            }                            }                    }                    else{                        showErrorLoading(response.body().getMessage());                    }                }                if (new ConnectionDetector(ServiceProviderEditFormActivity.this).isNetworkAvailable(ServiceProviderEditFormActivity.this)) {                    SPServiceListResponseCall();                }            }            @SuppressLint("LongLogTag")            @Override            public void onFailure(@NonNull Call<ServiceProviderRegisterFormCreateResponse> call, @NonNull Throwable t) {                avi_indicator.smoothToHide();                Log.w(TAG,"spDetailsReponseByUserIdCall flr"+"--->" + t.getMessage());            }        });    }    @SuppressLint("LongLogTag")    private SPDetailsByUserIdRequest spDetailsByUserIdRequest() {        /*         * user_id : 5fc61b82b750da703e48da78         */        SPDetailsByUserIdRequest spDetailsByUserIdRequest = new SPDetailsByUserIdRequest();        spDetailsByUserIdRequest.setUser_id(user_id);        Log.w(TAG,"spDetailsByUserIdRequest"+ "--->" + new Gson().toJson(spDetailsByUserIdRequest));        return spDetailsByUserIdRequest;    }    @SuppressLint("LongLogTag")    private void showAddAmount(int position) {        try {            Log.w(TAG,"showAddAmount : "+"position : "+position);            Dialog dialog = new Dialog(ServiceProviderEditFormActivity.this);            dialog.setContentView(R.layout.alert_add_sp_amout_layout);            dialog.setCancelable(false);            Button btn_add = dialog.findViewById(R.id.btn_add);            Spinner spr_timeslottype = dialog.findViewById(R.id.spr_timeslottype);            ImageView img_close = dialog.findViewById(R.id.img_close);            EditText edt_amount = dialog.findViewById(R.id.edt_amount);            edt_amount.setTransformationMethod(new NumericKeyBoardTransformationMethod());            ArrayList<String> timetypeArrayList = new ArrayList<>();            //timetypeArrayList.add("Select Time Type");            if(spTimeList != null && spTimeList.size()>0){                for (int i = 0; i < spTimeList.size(); i++) {                    String timeType = spTimeList.get(i).getTime();                    timetypeArrayList.add(timeType);                    ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(ServiceProviderEditFormActivity.this, R.layout.spinner_item, timetypeArrayList);                    spinnerArrayAdapter.setDropDownViewResource(R.layout.spinner_item); // The drop down view                    spr_timeslottype.setAdapter(spinnerArrayAdapter);                }            }            spr_timeslottype.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @SuppressLint("LongLogTag")                @Override                public void onItemSelected(AdapterView<?> parent, View view, int arg2, long arg3) {                    String  strTimeslot = spr_timeslottype.getSelectedItem().toString();                    Log.w(TAG,"strTimeslot : "+strTimeslot);                    spServiceList.get(position).setTime_slots(strTimeslot);                }                @Override                public void onNothingSelected(AdapterView<?> arg0) {                    // TODO Auto-generated method stub                }            });            btn_add.setOnClickListener(new View.OnClickListener() {                @SuppressLint("LongLogTag")                @Override                public void onClick(View view) {                    if(edt_amount.getText().toString().isEmpty()){                        Toasty.warning(getApplicationContext(),"Please enter the service amount",Toast.LENGTH_SHORT).show();                    }else{                        spServiceList.get(position).setAmount(Integer.parseInt(edt_amount.getText().toString()));                        spServiceList.get(position).setChbxChecked(true);                        spServiceList.get(position).setValueAdded(true);                        // bus_service_list.get(position).setAmount(Integer.valueOf(edt_amount.getText().toString()));                        spServiceListEditAdapter.notifyItemChanged(position);                        ServiceProviderRegisterFormCreateRequest.BusServiceListBean busServiceListBean = new ServiceProviderRegisterFormCreateRequest.BusServiceListBean();                        busServiceListBean.setBus_service_list(spServiceList.get(position).getService_list());                        busServiceListBean.setTime_slots(spServiceList.get(position).getTime_slots());                        busServiceListBean.setAmount(spServiceList.get(position).getAmount());                        bus_service_list.add(busServiceListBean);                        Log.w(TAG + " onItemSPServiceCheck added_service_list",new Gson().toJson(bus_service_list));                    }                    dialog.dismiss();                }            });            img_close.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Log.w(TAG,"img_close : "+"position : "+position);                    if(spServiceList != null && spServiceList.size()>0){                        spServiceList.get(position).setValueAdded(false);                        spServiceList.get(position).setChbxChecked(false);                        spServiceListEditAdapter.notifyItemChanged(position);                        Log.w(TAG,"img_close : "+"notifyItemChanged position : "+position);                    }                    Log.w(TAG,"img_close spServiceList : "+new Gson().toJson(spServiceList));                    dialog.dismiss();                }            });            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));            dialog.show();        } catch (WindowManager.BadTokenException e) {            e.printStackTrace();        }    }    private void showRegisterSuccessalert(String message) {        try {            dialog = new Dialog(ServiceProviderEditFormActivity.this);            dialog.setCancelable(false);            dialog.setContentView(R.layout.alert_register_update);            TextView txt_success_msg = dialog.findViewById(R.id.txt_success_msg);            Button btn_back_to_profile = dialog.findViewById(R.id.btn_back_to_profile);            txt_success_msg.setText(message);            btn_back_to_profile.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    startActivity(new Intent(ServiceProviderEditFormActivity.this,SPProfileScreenActivity.class));                    finish();                    dialog.dismiss();                }            });            Objects.requireNonNull(dialog.getWindow()).setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));            dialog.show();        } catch (WindowManager.BadTokenException e) {            e.printStackTrace();        }    }}